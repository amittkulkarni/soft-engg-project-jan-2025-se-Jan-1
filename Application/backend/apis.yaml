openapi: 3.0.0
info:
  title: User and Course API
  description: API documentation for user authentication and course management
  version: 1.0.0
paths:
  /signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Email already exists

  /login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid email or password

  /weeks:
    post:
      summary: Create a new week
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                week_number:
                  type: integer
                title:
                  type: string
      responses:
        '201':
          description: New week added successfully
        '409':
          description: Week already exists
    get:
      summary: Get all weeks
      responses:
        '200':
          description: List of weeks

  /weeks/{week_id}:
    get:
      summary: Get week details
      parameters:
        - name: week_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Week details
        '404':
          description: Week not found
    put:
      summary: Update a week
      parameters:
        - name: week_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                week_number:
                  type: integer
                title:
                  type: string
      responses:
        '200':
          description: Week updated successfully
        '404':
          description: Week not found
    delete:
      summary: Delete a week
      parameters:
        - name: week_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Week deleted successfully
        '404':
          description: Week not found

  /lectures:
    post:
      summary: Create a new lecture
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                week_id:
                  type: integer
                title:
                  type: string
                video_id:
                  type: string
      responses:
        '201':
          description: New lecture added successfully
        '409':
          description: Lecture already exists
    get:
      summary: Get all lectures
      responses:
        '200':
          description: List of lectures

  /lectures/{lecture_id}:
    get:
      summary: Get lecture details
      parameters:
        - name: lecture_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Lecture details
        '404':
          description: Lecture not found
    put:
      summary: Update a lecture
      parameters:
        - name: lecture_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                week_id:
                  type: integer
                title:
                  type: string
                video_id:
                  type: string
      responses:
        '200':
          description: Lecture updated successfully
        '404':
          description: Lecture not found
    delete:
      summary: Delete a lecture
      parameters:
        - name: lecture_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Lecture deleted successfully
        '404':
          description: Lecture not found

  /assignments:
    post:
      summary: Create a new assignment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                week_id:
                  type: integer
                title:
                  type: string
                assignment_type:
                  type: string
                due_date:
                  type: string
                  format: date
      responses:
        '201':
          description: New assignment added successfully
        '409':
          description: Assignment already exists
    get:
      summary: Get all assignments
      responses:
        '200':
          description: List of assignments

  /assignments/{assignment_id}:
    get:
      summary: Get assignment details
      parameters:
        - name: assignment_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Assignment details
        '404':
          description: Assignment not found
    put:
      summary: Update an assignment
      parameters:
        - name: assignment_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                assignment_type:
                  type: string
                due_date:
                  type: string
                  format: date
      responses:
        '200':
          description: Assignment updated successfully
        '404':
          description: Assignment not found
    delete:
      summary: Delete an assignment
      parameters:
        - name: assignment_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Assignment deleted successfully
        '404':
          description: Assignment not found

  /assignment_questions:
    post:
      summary: Create a new assignment question
      description: Adds a new question to an assignment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assignment_id:
                  type: integer
                question_text:
                  type: string
                question_type:
                  type: string
                points:
                  type: integer
      responses:
        "201":
          description: New assignment question added successfully
        "400":
          description: All fields are required
        "404":
          description: Assignment not found

    get:
      summary: Get all assignment questions
      description: Fetches a list of all assignment questions.
      responses:
        "200":
          description: A list of assignment questions

  /assignment_questions/{question_id}:
    get:
      summary: Get a specific assignment question
      parameters:
        - name: question_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Assignment question details
        "404":
          description: Assignment question not found
    put:
      summary: Update an assignment question
      parameters:
        - name: question_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question_text:
                  type: string
                question_type:
                  type: string
                points:
                  type: integer
      responses:
        "200":
          description: Assignment question updated successfully
        "404":
          description: Assignment question not found
    delete:
      summary: Delete an assignment question
      parameters:
        - name: question_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Assignment question deleted successfully
        "404":
          description: Assignment question not found

  /options:
    post:
      summary: Create an option for an assignment question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question_id:
                  type: integer
                option_text:
                  type: string
                is_correct:
                  type: boolean
      responses:
        "201":
          description: New option added successfully
        "400":
          description: All fields are required
        "409":
          description: Option already exists for this question

    get:
      summary: Get all options
      responses:
        "200":
          description: A list of options

  /options/{option_id}:
    get:
      summary: Get a specific option
      parameters:
        - name: option_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Option details
        "404":
          description: Option not found
    put:
      summary: Update an option
      parameters:
        - name: option_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                option_text:
                  type: string
                is_correct:
                  type: boolean
      responses:
        "200":
          description: Option updated successfully
        "404":
          description: Option not found
    delete:
      summary: Delete an option
      parameters:
        - name: option_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Option deleted successfully
        "404":
          description: Option not found

  /programming_assignments:
    post:
      summary: Add a programming assignment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assignment_id:
                  type: integer
                problem_statement:
                  type: string
                input_format:
                  type: string
                output_format:
                  type: string
                constraints:
                  type: string
                sample_input:
                  type: string
                sample_output:
                  type: string
                test_cases:
                  type: array
                  items:
                    type: string
      responses:
        "201":
          description: Programming assignment added successfully
        "400":
          description: All required fields must be filled

  /programming_assignments/{assignment_id}:
    get:
      summary: Get a specific programming assignment
      parameters:
        - name: assignment_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Programming assignment details
        "404":
          description: Programming assignment not found
    put:
      summary: Update a programming assignment
      parameters:
        - name: assignment_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                problem_statement:
                  type: string
                input_format:
                  type: string
                output_format:
                  type: string
                constraints:
                  type: string
                sample_input:
                  type: string
                sample_output:
                  type: string
                test_cases:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Programming assignment updated successfully
        "404":
          description: Programming assignment not found
    delete:
      summary: Delete a programming assignment
      parameters:
        - name: assignment_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Programming assignment deleted successfully
        "404":
          description: Programming assignment not found

  /assignments/check_score:
    post:
      summary: "Check assignment score"
      description: "Calculate the total score based on the correct options provided."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                option_ids:
                  type: array
                  items:
                    type: integer
              required:
                - option_ids
      responses:
        "200":
          description: "Score calculated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  total_score:
                    type: integer
        "400":
          description: "Invalid input or no valid option IDs found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
